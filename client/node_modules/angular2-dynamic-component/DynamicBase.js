"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require('@angular/core');
var common_1 = require("@angular/common");
var http_1 = require('@angular/http');
var index_1 = require('ts-metadata-helper/index');
var Utils_1 = require('./Utils');
exports.DYNAMIC_TYPES = {
    DynamicExtraModules: 'DynamicExtraModules' // AoT workaround Symbol(..)
};
var DynamicBase = (function () {
    function DynamicBase(dynamicExtraModules, viewContainer, compiler, http, dynamicSelector) {
        this.dynamicExtraModules = dynamicExtraModules;
        this.viewContainer = viewContainer;
        this.compiler = compiler;
        this.http = http;
        this.dynamicSelector = dynamicSelector;
        this.dynamicComponentReady = new core_1.EventEmitter(false);
        this.dynamicComponentBeforeReady = new core_1.EventEmitter(false);
        this.injector = core_1.ReflectiveInjector.fromResolvedProviders([], this.viewContainer.parentInjector);
    }
    /**
     * @override
     */
    DynamicBase.prototype.ngOnChanges = function () {
        var _this = this;
        this.dynamicComponentBeforeReady.emit(null);
        this.getDynamicModule().then(function (module) {
            return _this.compiler.compileModuleAndAllComponentsAsync(module)
                .then(function (moduleWithComponentFactories) {
                _this.componentInstance = _this.viewContainer.createComponent(moduleWithComponentFactories.componentFactories.find(function (componentFactory) {
                    var bufferedSelector = null;
                    var builtComponentDecorator = _this.findComponentDecoratorByComponentType(_this.componentType);
                    if (Utils_1.Utils.isPresent(builtComponentDecorator)
                        && Utils_1.Utils.isPresent(bufferedSelector = Reflect.get(builtComponentDecorator, 'selector'))
                        && componentFactory.selector === bufferedSelector) {
                        return true;
                    }
                    return componentFactory.selector === _this.dynamicSelector;
                }), 0, _this.injector);
                _this.applyPropertiesToDynamicComponent(_this.componentInstance.instance);
                _this.dynamicComponentReady.emit(_this.componentInstance.instance);
            });
        });
    };
    /**
     * @override
     */
    DynamicBase.prototype.ngOnDestroy = function () {
        if (Utils_1.Utils.isPresent(this.componentInstance)) {
            this.componentInstance.destroy();
            this.componentInstance = null;
        }
        if (Utils_1.Utils.isPresent(this.cachedDynamicModule)) {
            this.compiler.clearCacheFor(this.cachedDynamicModule);
            this.cachedDynamicModule = null;
        }
        if (Utils_1.Utils.isPresent(this.cachedDynamicComponent)) {
            this.compiler.clearCacheFor(this.cachedDynamicComponent);
            this.cachedDynamicComponent = null;
        }
    };
    DynamicBase.prototype.getDynamicModule = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (Utils_1.Utils.isPresent(_this.componentTemplate)) {
                resolve(_this.makeComponentModule(_this.componentTemplate));
            }
            else if (Utils_1.Utils.isPresent(_this.componentTemplateUrl)) {
                _this.loadRemoteTemplate(_this.componentTemplateUrl, resolve);
            }
            else {
                resolve(_this.makeComponentModule(null, _this.componentType));
            }
        });
    };
    DynamicBase.prototype.loadRemoteTemplate = function (url, resolve) {
        var _this = this;
        var requestArgs = { withCredentials: true };
        if (Utils_1.Utils.isPresent(this.componentRemoteTemplateFactory)) {
            requestArgs = this.componentRemoteTemplateFactory.buildRequestOptions();
        }
        this.http.get(url, requestArgs)
            .subscribe(function (response) {
            if ([301, 302, 307, 308].indexOf(response.status) > -1) {
                var chainedUrl = response.headers.get('Location');
                console.debug('[$DynamicBase][loadRemoteTemplate] The URL into the chain is:', chainedUrl);
                if (Utils_1.Utils.isPresent(chainedUrl)) {
                    _this.loadRemoteTemplate(chainedUrl, resolve);
                }
                else {
                    console.warn('[$DynamicBase][loadRemoteTemplate] The URL into the chain is empty. The process of redirect has stopped.');
                }
            }
            else {
                resolve(_this.makeComponentModule(Utils_1.Utils.isPresent(_this.componentRemoteTemplateFactory)
                    ? _this.componentRemoteTemplateFactory.parseResponse(response)
                    : response.text()));
            }
        }, function (response) {
            console.warn('[$DynamicBase][loadRemoteTemplate] Error response:', response);
            resolve(_this.makeComponentModule(_this.componentDefaultTemplate || ''));
        });
    };
    DynamicBase.prototype.makeComponentModule = function (template, componentType) {
        var dynamicComponentType = this.cachedDynamicComponent = this.makeComponent(template, componentType);
        var componentModules = this.dynamicExtraModules.concat(this.componentModules || []);
        var dynamicComponentModule = (function () {
            function dynamicComponentModule() {
            }
            dynamicComponentModule.decorators = [
                { type: core_1.NgModule, args: [{
                            declarations: [dynamicComponentType],
                            imports: [common_1.CommonModule].concat(componentModules)
                        },] },
            ];
            /** @nocollapse */
            dynamicComponentModule.ctorParameters = [];
            return dynamicComponentModule;
        }());
        return this.cachedDynamicModule = dynamicComponentModule;
    };
    DynamicBase.prototype.makeComponent = function (template, componentType) {
        var dynamicSelector = this.dynamicSelector;
        var componentDecorator = this.findComponentDecoratorByComponentType(componentType);
        if (Utils_1.Utils.isPresent(componentDecorator)
            && Utils_1.Utils.isUndefined(Reflect.get(componentDecorator, 'selector'))) {
            Reflect.set(componentDecorator, 'selector', componentType.name);
        }
        var dynamicComponentParentClass = componentType || (function () {
            function class_1() {
            }
            return class_1;
        }());
        var dynamicComponentClass = (function (_super) {
            __extends(dynamicComponentClass, _super);
            function dynamicComponentClass() {
                _super.apply(this, arguments);
            }
            dynamicComponentClass.decorators = [
                { type: core_1.Component, args: [componentDecorator || { selector: dynamicSelector, template: template },] },
            ];
            /** @nocollapse */
            dynamicComponentClass.ctorParameters = [];
            return dynamicComponentClass;
        }(dynamicComponentParentClass));
        return dynamicComponentClass;
    };
    DynamicBase.prototype.applyPropertiesToDynamicComponent = function (instance) {
        var _this = this;
        var metadataHolder = index_1.MetadataHelper.findPropertyMetadata(this, core_1.Input);
        for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
            var property = _a[_i];
            if (Reflect.has(metadataHolder, property)) {
                if (Reflect.has(instance, property)) {
                    console.warn('[$DynamicBase][applyPropertiesToDynamicComponent] The property', property, 'will be overwritten for the component', instance);
                }
                Reflect.set(instance, property, Reflect.get(this, property));
            }
        }
        if (Utils_1.Utils.isPresent(this.componentContext)) {
            var _loop_1 = function(property) {
                if (Reflect.has(instance, property)) {
                    console.warn('[$DynamicBase][applyPropertiesToDynamicComponent] The property', property, 'will be overwritten for the component', instance);
                }
                var propValue = Reflect.get(this_1.componentContext, property);
                var attributes = {};
                if (!Utils_1.Utils.isFunction(propValue)) {
                    attributes.set = function (v) { return Reflect.set(_this.componentContext, property, v); };
                }
                attributes.get = function () { return Reflect.get(_this.componentContext, property); };
                Reflect.defineProperty(instance, property, attributes);
            };
            var this_1 = this;
            for (var property in this.componentContext) {
                _loop_1(property);
            }
        }
    };
    DynamicBase.prototype.findComponentDecoratorByComponentType = function (componentType) {
        if (Utils_1.Utils.isPresent(componentType)) {
            var annotationsArray = index_1.MetadataHelper.findAnnotationsMetaData(componentType, core_1.Component);
            if (annotationsArray.length) {
                return annotationsArray[0];
            }
        }
        return null;
    };
    /** @nocollapse */
    DynamicBase.ctorParameters = [
        { type: Array, decorators: [{ type: core_1.Inject, args: [exports.DYNAMIC_TYPES.DynamicExtraModules,] },] },
        { type: core_1.ViewContainerRef, },
        { type: core_1.Compiler, },
        { type: http_1.Http, },
        null,
    ];
    DynamicBase.propDecorators = {
        'dynamicComponentReady': [{ type: core_1.Output },],
        'dynamicComponentBeforeReady': [{ type: core_1.Output },],
        'componentType': [{ type: core_1.Input },],
        'componentTemplate': [{ type: core_1.Input },],
        'componentContext': [{ type: core_1.Input },],
        'componentTemplateUrl': [{ type: core_1.Input },],
        'componentDefaultTemplate': [{ type: core_1.Input },],
        'componentRemoteTemplateFactory': [{ type: core_1.Input },],
        'componentModules': [{ type: core_1.Input },],
    };
    return DynamicBase;
}());
exports.DynamicBase = DynamicBase;
//# sourceMappingURL=DynamicBase.js.map