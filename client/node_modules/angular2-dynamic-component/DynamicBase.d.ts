import { Compiler, OnChanges, OnDestroy, EventEmitter, ViewContainerRef, Type } from '@angular/core';
import { Http } from '@angular/http';
import { IComponentRemoteTemplateFactory } from './IComponentRemoteTemplateFactory';
export interface IComponentContext {
    [index: string]: any;
}
export interface TDynamicComponentType {
}
export declare const DYNAMIC_TYPES: {
    DynamicExtraModules: string;
};
export declare class DynamicBase implements OnChanges, OnDestroy {
    protected dynamicExtraModules: Array<any>;
    protected viewContainer: ViewContainerRef;
    protected compiler: Compiler;
    protected http: Http;
    protected dynamicSelector: string;
    dynamicComponentReady: EventEmitter<TDynamicComponentType>;
    dynamicComponentBeforeReady: EventEmitter<void>;
    componentType: {
        new (): TDynamicComponentType;
    };
    componentTemplate: string;
    componentContext: IComponentContext;
    componentTemplateUrl: string;
    componentDefaultTemplate: string;
    componentRemoteTemplateFactory: IComponentRemoteTemplateFactory;
    componentModules: Array<any>;
    private injector;
    private cachedDynamicModule;
    private cachedDynamicComponent;
    private componentInstance;
    constructor(dynamicExtraModules: Array<any>, viewContainer: ViewContainerRef, compiler: Compiler, http: Http, dynamicSelector: string);
    /**
     * @override
     */
    ngOnChanges(): void;
    /**
     * @override
     */
    ngOnDestroy(): void;
    protected getDynamicModule(): Promise<Type<any>>;
    protected loadRemoteTemplate(url: string, resolve: (value: Type<any>) => void): void;
    protected makeComponentModule(template: string, componentType?: {
        new (): TDynamicComponentType;
    }): Type<any>;
    protected makeComponent(template: string, componentType?: {
        new (): TDynamicComponentType;
    }): Type<TDynamicComponentType>;
    protected applyPropertiesToDynamicComponent(instance: TDynamicComponentType): void;
    private findComponentDecoratorByComponentType(componentType?);
}
